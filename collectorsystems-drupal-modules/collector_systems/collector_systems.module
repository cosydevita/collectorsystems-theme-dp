<?php

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Database\Database;


function collector_systems_preprocess_page(&$variables){
  $variables['#cache']['max-age'] = 0;
}

/**
 * Implements hook_theme().
 */
function collector_systems_theme() {
  return [
    'objects-list-page' => [
      'variables' => [
        'object_details' =>NULL,
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'count' => NULL,
        'dataorderby' => NULL,
        'current_page' => NULL,
        'requested_pageNo' => NULL,
        'qSearch' => NULL,
        'module_path' => NULL,
        'enable_maps' => NULL
      ],
    ],
    'artists-list-page' => [
      'variables' => [
        'AllArtists' =>NULL,
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'count' => NULL,
        'dataorderby' => NULL,
        'current_page' => NULL,
        'requested_pageNo' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
        'requested_page' => NULL,
        'collector_systems_module_path' => NULL,
        'module_path' => NULL
      ],
    ],
    'exhibitions-list-page' => [
      'variables' => [
        'all_exhibitions' =>NULL,
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'count' => NULL,
        'dataorderby' => NULL,
        'current_page' => NULL,
        'requested_pageNo' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
        'module_path' => NULL,
        'showImagesOnListPages' => NULL
      ],
    ],
    'groups-list-page' => [
      'variables' => [
        'all_groups' =>NULL,
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'count' => NULL,
        'dataorderby' => NULL,
        'current_page' => NULL,
        'requested_pageNo' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
        'module_path' => NULL,
        'showImagesOnListPages' => NULL
      ],
    ],
    'collections-list-page' => [
      'variables' => [
        'all_collections' =>NULL,
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'count' => NULL,
        'dataorderby' => NULL,
        'current_page' => NULL,
        'requested_page' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
        'site_url' => NULL,
        'module_path' => NULL,
        'showImagesOnListPages' => NULL
      ],
    ],
    'artobject-detail-page' => [
      'variables' => [
        'thumbDetails' => NULL,
        'customized_fields_array' => NULL,
        'object_details' => NULL,
        'row_number' => NULL,
        'row_before' => NULL,
        'row_after' => NULL,
        'count' => NULL,
        'sortBy' =>NULL,
        'qSearch' => NULL,
        'requested_pageNo' => NULL,
        'module_path' => NULL,
        'enable_maps' => NULL
      ],
    ],
    'artist-detail-page' => [
      'variables' => [
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'obj_count' => NULL,
        'artistId' => NULL,
        'groupLevelOrderBy' => NULL,
        'groupLevelPageNo' => NULL,
        'artist_details' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
        'object_details' => NULL,
        'listPageSize' => NULL,
        'ajaxfor' => NULL,
        'collector_systems_module_path' => NULL,
        'module_path' => NULL,
        'enable_maps' => NULL
      ],
    ],
    'exhibition-detail-page' => [
      'variables' => [
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'obj_count' => NULL,
        'groupLevelOrderBy' => NULL,
        'groupLevelPageNo' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
        'object_details' => NULL,
        'exhibitionID' => NULL,
        'exhibition_details' => NULL,
        'listPageSize' => NULL,
        'ajaxfor' => NULL,
        'module_path' => NULL,
        'enable_maps' => NULL
      ],
    ],
    'group-detail-page' => [
      'variables' => [
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'obj_count' => NULL,
        'groupLevelOrderBy' => NULL,
        'groupLevelPageNo' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
        'object_details' => NULL,
        'group_details' => NULL,
        'groupID' => NULL,
        'group_object_details' => NULL,
        'listPageSize' => NULL,
        'ajaxfor' => NULL,
        'module_path' => NULL,
        'enable_maps' => NULL
      ],
    ],
    'collection-detail-page' => [
      'variables' => [
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'obj_count' => NULL,
        'groupLevelOrderBy' => NULL,
        'groupLevelPageNo' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
        'object_details' => NULL,
        'collectionID' => NULL,
        'collection_details' => NULL,
        'listPageSize' => NULL,
        'ajaxfor' => NULL,
        'module_path' => NULL,
        'enable_maps' => NULL
      ],
    ],
    'custom_api_integration_response' => [
      'variables' => [
        'response' => '',
        'show_field_labels' => '',
        'enable_zoom' => '',
        'filter_keywords' => '',
        'items_per_page' => '',
        'footer_text' => '',
      ],
    ],
    'dashboard' => [
      'variables' => [
        'response' => '',
        'show_field_labels' => '',
        'enable_zoom' => '',
        'filter_keywords' => '',
        'items_per_page' => '',
        'footer_text' => '',
        'API_Synced_On' => '',
        'API_Synced_By' => ''
      ],
    ],



  ];


}

/*
*Returns the array of filtered keywords
*/
function get_filtered_keywords(){
  $config = \Drupal::config('collector_systems.settings');
  $subsKey = $config->get('subscription_key');
  $subAcntId = $config->get('account_guid');
  $subsId = $config->get('subscription_id');
  $filterImagesByKeywords = $config->get('filter_keywords');
  $keywordsArray = [];
  foreach($filterImagesByKeywords as $key => $value){
    $keywordsArray[] = $key;
  }

  return $keywordsArray;
}


/**
 * AJAX callback for the "Add to Second List" button.
 */
function customize_object_detail_fields_setting_add_button_ajax_callback($form, &$form_state) {
  // Move selected items from the first select list to the second select list.
  $selected_items_values = array_filter($form_state->getValue('select_field1'));

  // Initialize an array
  $selected_items = array();

  // Iterate through the selected items and extract the text.
  foreach ($selected_items_values as $selected_item_value) {
    // Assuming $selected_item_value is the key of the selected option.
    // You can access the text inside the option using the form element's #options attribute.
    $option_value = $selected_item_value;
    $option_text =  (string)  $form['select_field1']['#options'][$selected_item_value];
    unset($form['select_field1']['#options'][$selected_item_value]);
    $selected_items[$option_value] = $option_text;

  }

  $form['select_field2']['#options'] = array_merge($form['select_field2']['#options'], $selected_items);
  $form_state->setRebuild(TRUE);
  $response = new AjaxResponse();

  $response->addCommand(new ReplaceCommand("#select-field2-wrapper", ($form['select_field2'])));
  $response->addCommand(new ReplaceCommand("#select-field1-wrapper", ($form['select_field1'])));

  return $response;

}


/**
 * Implements hook_form_alter().
 */
function collector_systems_form_alter(&$form, &$form_state, $form_id) {
  // Check if this is the form you want to attach JavaScript to.
  if ($form_id === 'customize_object_detail_fields_settings_form') {

    // Attach the JavaScript file.
    $form['#attached']['library'][] = 'collector_systems/customize_object_detail_fields';

  }
  if ( $form_id === 'customize_object_list_fields_settings_form') {
    $form['#attached']['library'][] = 'collector_systems/customize_object_list_fields';
  }
}
$database = Database::getConnection();

if (!($database->schema()->tableExists('clsobjects_fields'))) {
  create_table_clsobjects_fields();
}

function create_table_clsobjects_fields(){

  $database = Database::getConnection();
  $table_name = 'clsobjects_fields'; // Replace {table_name} with your actual table name.
  $schema = [
    'description' => 'Your table description',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique identifier for the record.',
      ],
      'fieldname' => [
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Field name',
      ],
      'fieldvalue' => [
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Field value',
      ],
      'fieldtype' => [
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Field type',
      ],
    ],
    'primary key' => ['id'],
  ];

  // Create the table.
  $database->schema()->createTable($table_name, $schema);

}
