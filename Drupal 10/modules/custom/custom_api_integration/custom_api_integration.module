<?php
use Drupal\Core\Database\Database;
use Drupal\Core\Database\Schema;
use Drupal\custom_api_integration\Csconstants;
use Drupal\menu_link_content\Entity\MenuLinkContent;

/**
 * Creates menu items in the main navigation menu if there are no menu items created for list pages
 */
function create_main_menu_items(){
  // Array of menu items for the main menu
  $main_menu_items = array(
    array(
      'title' => 'Objects',
      'link' => 'internal:/objects',
      'menu_name' => 'main',
      'expanded' => TRUE,
      'weight' => 0,

    ),
    array(
      'title' => 'Artists',
      'link' =>  'internal:/artists',
      'menu_name' => 'main',
      'expanded' => TRUE,
      'weight' => 1,

    ),
    array(
      'title' => 'Exhibitions',
      'link' =>  'internal:/exhibitions',
      'menu_name' => 'main',
      'expanded' => TRUE,
      'weight' => 2,

    ),
    array(
      'title' => 'Groups',
      'link' =>  'internal:/groups',
      'menu_name' => 'main',
      'expanded' => TRUE,
      'weight' => 3,
    ),
    array(
      'title' => 'Collectons',
      'link' =>  'internal:/collections',
      'menu_name' => 'main',
      'expanded' => TRUE,
      'weight' => 4,

    ),
    // Add more main menu items as needed
  );

  $existing_menu_items = [];
  // Iterate through the array and create main menu items
  foreach ($main_menu_items as $item) {
    $existing_menu = \Drupal::entityTypeManager()
    ->getStorage('menu_link_content')
    ->loadByProperties(['link' => $item['link']]);
    if($existing_menu){
      $existing_menu_items = $existing_menu;
    }

  }
  if (!$existing_menu_items) {
    // Menu items does not exist, create it
    foreach ($main_menu_items as $item) {
      $menu_link = MenuLinkContent::create($item);
      $menu_link->save();
    }

  }
}
/**
 * Implements hook_theme().
 */
function custom_api_integration_theme() {
  return [
    'custom_api_integration_response' => [
      'variables' => [
        'response' => '',
        'show_field_labels' => '',
        'enable_zoom' => '',
        'filter_keywords' => '',
        'items_per_page' => '',
        'footer_text' => '',
      ],
    ],
    'dashboard' => [
      'variables' => [
        'response' => '',
        'show_field_labels' => '',
        'enable_zoom' => '',
        'filter_keywords' => '',
        'items_per_page' => '',
        'footer_text' => '',
        'API_Synced_On' => '',
        'API_Synced_By' => ''
      ],
    ],
    'objects-list-page' => [
      'variables' => [
        'object_details' =>NULL,
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'count' => NULL,
        'dataorderby' => NULL,
        'current_page' => NULL,
        'requested_pageNo' => NULL,
        'qSearch' => NULL
      ],
    ],
    'artists-list-page' => [
      'variables' => [
        'AllArtists' =>NULL,
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'count' => NULL,
        'dataorderby' => NULL,
        'current_page' => NULL,
        'requested_pageNo' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
        'requested_page' => NULL
      ],
    ],
    'exhibitions-list-page' => [
      'variables' => [
        'all_exhibitions' =>NULL,
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'count' => NULL,
        'dataorderby' => NULL,
        'current_page' => NULL,
        'requested_pageNo' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
      ],
    ],
    'groups-list-page' => [
      'variables' => [
        'all_groups' =>NULL,
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'count' => NULL,
        'dataorderby' => NULL,
        'current_page' => NULL,
        'requested_pageNo' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
      ],
    ],
    'collections-list-page' => [
      'variables' => [
        'all_collections' =>NULL,
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'count' => NULL,
        'dataorderby' => NULL,
        'current_page' => NULL,
        'requested_page' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
        'site_url' => NULL
      ],
    ],
    'artobject-detail-page' => [
      'variables' => [
        'thumbDetails' => NULL,
        'customized_fields_array' => NULL,
        'object_details' => NULL,
        'row_number' => NULL,
        'row_before' => NULL,
        'row_after' => NULL,
        'count' => NULL,
        'sortBy' =>NULL,
        'qSearch' => NULL,
        'requested_pageNo' => NULL,
      ],
    ],
    'artist-detail-page' => [
      'variables' => [
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'obj_count' => NULL,
        'artistId' => NULL,
        'groupLevelOrderBy' => NULL,
        'groupLevelPageNo' => NULL,
        'artist_details' => NULL,
        'groupLevelPageNo' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
        'object_details' => NULL,
        'listPageSize' => NULL,
        'ajaxfor' => NULL,
      ],
    ],
    'exhibition-detail-page' => [
      'variables' => [
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'obj_count' => NULL,
        'groupLevelOrderBy' => NULL,
        'groupLevelPageNo' => NULL,
        'groupLevelPageNo' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
        'object_details' => NULL,
        'exhibitionID' => NULL,
        'exhibition_details' => NULL,
        'listPageSize' => NULL,
        'ajaxfor' => NULL,
      ],
    ],
    'group-detail-page' => [
      'variables' => [
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'obj_count' => NULL,
        'groupLevelOrderBy' => NULL,
        'groupLevelPageNo' => NULL,
        'groupLevelPageNo' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
        'object_details' => NULL,
        'group_details' => NULL,
        'groupID' => NULL,
        'group_object_details' => NULL,
        'listPageSize' => NULL,
        'ajaxfor' => NULL,
      ],
    ],
    'collection-detail-page' => [
      'variables' => [
        'nxshowrec' => NULL,
        'nxshskip' => NULL,
        'obj_count' => NULL,
        'groupLevelOrderBy' => NULL,
        'groupLevelPageNo' => NULL,
        'groupLevelPageNo' => NULL,
        'qSearch' => NULL,
        'loadsec' => NULL,
        'object_details' => NULL,
        'collectionID' => NULL,
        'collection_details' => NULL,
        'listPageSize' => NULL,
        'ajaxfor' => NULL,
      ],
    ],
    'azure-map-page' =>[
      'variables' => [
        'locations' => NULL,
      ]
    ]


  ];
}
/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function custom_api_integration_preprocess_page(&$variables)
{
    $variables['#attached']['library'][] = 'custom_api_integration/custom_api_integration';
    create_main_menu_items();
}

function getObjectImageAttachmentsByObjectId($artObjID, $mainAttachmentId)
{

  $config = \Drupal::config('custom_api_integration.settings');
  $subsKey = $config->get('subscription_key');
  $subAcntId = $config->get('account_guid');
  $subsId = $config->get('subscription_id');
  $filterImagesByKeywords = $config->get('filter_keywords');
  $keywordsArray = [];
  foreach($filterImagesByKeywords as $key => $value){
    $keywordsArray[] = $key;
  }
  $filterKeywordsUrl = "";
  if($keywordsArray)
  {
    $keywordIndex=0;
    foreach($keywordsArray as $keywordString)
    {
        if($keywordIndex==0)
        {
            $filterKeywordsUrl.='attachmentKeywords/AttachmentKeywordString%20eq%20%27'.rawurlencode($keywordString).'%27';
        }
        else
        {
            $filterKeywordsUrl.='%20OR%20attachmentKeywords/AttachmentKeywordString%20eq%20%27'.rawurlencode($keywordString).'%27';
        }
        $keywordIndex=$keywordIndex+1;
    }



    //match keywords or attachment is main attachment
    $url = csconstants::Public_API_URL.$subAcntId.'/ObjectImageAttachments?$expand=Attachment($expand=AttachmentKeywords($select=AttachmentKeywordString);$select=AttachmentId,SubscriptionId,FileName,Description,DetailLargeURL,DetailXLargeURL,FileURL,ThumbSizeURL)&$filter=ObjectId%20eq%20'.$artObjID.'%20And%20SubscriptionId%20eq%20'.$subsId.'And%20((Attachment/AttachmentKeywords/any(attachmentKeywords:'.$filterKeywordsUrl.'))%20OR%20AttachmentId%20eq%20'.$mainAttachmentId.')&$select=AttachmentId,ObjectId';

    echo '<script>console.log("attachments url: ' . $url . '")</script>';
    // return $d = checkshortfunction($url, $subsKey);


    //call the api
    $curl = curl_init($url);
    curl_setopt($curl, CURLOPT_URL, $url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

    $headers = array(
    "Accept: application/json",
    "Ocp-Apim-Subscription-Key:$subsKey ",
    "Cache-Control:no-cache",
    );
    curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
    //for debug only!
    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);

    $data = curl_exec($curl);
    curl_close($curl);

    $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
    if($httpcode == 403)
    {
      // get_template_part( 403 );
      exit();
    }
    $data = json_decode($data, TRUE);
    return $data['value'] ?? null;

  }else{
    return null;
  }

}

/*
*Returns the array of filtered keywords
*/
function get_filtered_keywords(){
  $config = \Drupal::config('custom_api_integration.settings');
  $subsKey = $config->get('subscription_key');
  $subAcntId = $config->get('account_guid');
  $subsId = $config->get('subscription_id');
  $filterImagesByKeywords = $config->get('filter_keywords');
  $keywordsArray = [];
  foreach($filterImagesByKeywords as $key => $value){
    $keywordsArray[] = $key;
  }

  return $keywordsArray;
}
