<?php

/**
 * @file
 * Functions to support theming in the collectorsystems theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\views\Form\ViewsForm;
use \Drupal\views\ViewExecutable;
use Drupal\node\Entity\Node;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\file\Entity\File;



/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function collectorsystems_preprocess_html(&$variables) {
  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  if (!empty($variables['page']['featured_top'])) {
    $variables['attributes']['class'][] = 'has-featured-top';
  }

}

/**
 * Implements hook_preprocess_HOOK() for page title templates.
 */
function collectorsystems_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = [
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    ];
    $variables['title_suffix']['shortcut_wrapper'] = [
      '#markup' => '</div>',
      '#weight' => -99,
    ];
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}

/**
 * Implements hook_preprocess_HOOK() for collectorsystemsntenance-page.html.twig.
 */
function collectorsystems_preprocess_collectorsystemsntenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_collectorsystemsntenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // collectorsystems has custom styling for the collectorsystemsntenance page.
  $variables['#attached']['library'][] = 'collectorsystems/collectorsystemsntenance_page';
}

function collectorsystems_preprocess_page(&$variables){
  $footer_text =  \Drupal::config('custom_api_integration.settings')->get('footer_text');
  $variables['footer_text'] = $footer_text;


  //pass homepage_image_url
  $homepage_image =  \Drupal::config('homepage_image.settings')->get('homepage_image');
  if($homepage_image){
    $file_id_homepage_image = $homepage_image[0];
    $file_homepage_image = File::load($file_id_homepage_image[0]);
    if($file_homepage_image){
      // Get the URL of the file.
      $homepage_image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($file_homepage_image->getFileUri());
    }

  }
  else{
    $homepage_image_url = "/themes/custom/collectorsystems/assets/img/banner.jpeg";

  }
  $variables['homepage_image_url'] = $homepage_image_url;

  $variables['#cache']['max-age'] = 0;

}
/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function collectorsystems_preprocess_node(&$variables) {
  $variables['#cache']['max-age'] = 0;

  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
  if ($variables['node']->getType() == 'artist_object') {
    // Get the artist ID from the node or wherever it is stored.
    $artistId = $variables['node']->get('field_artist_id')->getValue()[0]['target_id'];
    // Pass the artist ID to the Twig template.
    $variables['artist_id'] = $artistId;
  }
  if ($variables['node']->getType() == 'objects') {
    // Get the artist ID from the node or wherever it is stored.
    // $artistId = $variables['node']->get('field_artist_id')->getValue()[0]['target_id'];
    // Pass the artist ID to the Twig template.
    // $variables['artist_id'] = $artistId;
    $node = $variables['node'];

    \Drupal::cache('config')->invalidate('customize_object_detail_fields.settings');

    $config = \Drupal::config('customize_object_detail_fields.settings');


    if($config->get('select_field2')){
      $options =  $config->get('select_field2');
    }

    $detail_fields_values  = [];

    foreach ($options as $key => $value) {
      if($key!='Title'){
        $key= 'field_'.$key;
      }
      $key = strtolower($key);
      if ($node->hasField($key)) {
        $field_value = $node->get($key)->value;
        if($field_value){
          $detail_fields_values[] = $field_value;
        }
      }

    }


    $variables['detail_fields_values'] = $detail_fields_values;

  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function collectorsystems_preprocess_block(&$variables) {
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function collectorsystems_preprocess_menu(&$variables) {
  $variables['attributes']['class'][] = 'clearfix';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function collectorsystems_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
}

/**
 * Implements hook_form_alter().
 */
function collectorsystems_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add classes to the search form.
  if (in_array($form_id, ['search_block_form', 'search_form'])) {
    $key = ($form_id == 'search_block_form') ? 'actions' : 'basic';
    if (!isset($form[$key]['submit']['#attributes'])) {
      $form[$key]['submit']['#attributes'] = new Attribute();
    }
    $form[$key]['submit']['#attributes']->addClass('search-form__submit');
  }

  $form_object = $form_state->getFormObject();

  // Add class to the Media Library views form.
  if ($form_object instanceof ViewsForm && strpos($form_object->getBaseFormId(), 'views_form_media_library') === 0) {
    // The conditional below exists because the media-library-views-form class
    // is currently added by Classy, but Umami will eventually not use Classy as
    // a base theme.
    // @todo remove conditional, keep class addition in
    //   https://drupal.org/node/3110137
    // @see https://www.drupal.org/node/3109287
    // @see classy_form_alter()
    if (!isset($form['#attributes']['class']) || !in_array('media-library-views-form', $form['#attributes']['class'])) {
      $form['#attributes']['class'][] = 'media-library-views-form';
    }
  }
}

/**
 * Implements hook_preprocess_links__media_library_menu().
 *
 * This targets the menu of available media types in the media library's modal
 * dialog.
 *
 * @todo Do this in the relevant template once
 *   https://www.drupal.org/project/drupal/issues/3088856 is resolved.
 */
function collectorsystems_preprocess_links__media_library_menu(array &$variables) {
  foreach ($variables['links'] as &$link) {
    // This conditional exists because the media-library-menu__link class is
    // currently added by Classy, but collectorsystems will eventually not use Classy as a
    // base theme.
    // @todo remove conditional, keep class addition in
    //   https://drupal.org/node/3110137
    // @see https://www.drupal.org/node/3109287
    // @see classy_preprocess_links__media_library_menu()
    if (!isset($link['link']['#options']['attributes']['class']) || !in_array('media-library-menu__link', $link['link']['#options']['attributes']['class'])) {
      $link['link']['#options']['attributes']['class'][] = 'media-library-menu__link';
    }
  }
}

/**
 * Implements hook_preprocess_image_widget().
 *
 * @todo Revisit in https://drupal.org/node/3117430
 */
function collectorsystems_preprocess_image_widget(&$variables) {
  if (!empty($variables['element']['fids']['#value'])) {
    $file = reset($variables['element']['#files']);
    $variables['data']["file_{$file->id()}"]['filename']['#suffix'] = ' <span class="file-size">(' . format_size($file->getSize()) . ')</span> ';
  }
}

/**
 * Implements template_preprocess_links().
 *
 * This makes it so array keys of #links items are added as a class. This
 * functionality was removed in Drupal 8.1, but still necessary in some
 * instances.
 *
 * @todo remove in https://drupal.org/node/3120962
 */
function collectorsystems_preprocess_links(&$variables) {
  if (!empty($variables['links'])) {
    foreach ($variables['links'] as $key => $value) {
      if (!is_numeric($key)) {
        $class = Html::getClass($key);
        $variables['links'][$key]['attributes']->addClass($class);
      }
    }
  }
}

function collectorsystems_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $field = $variables['field'];

  if ($view->id() == 'objects' && $view->current_display == 'page_1') {
    if ($field->field == 'field_artistid') {
      // Replace characters in the field output.
      if($variables['output']){
        $id = $variables['output']->__toString();
      }else{
        $id = $variables['output'];
      }


      $database = \Drupal::database();
      $query = $database->select('node__field_artistid', 'a');
      $query->fields('a', ['entity_id',]);
      $query->condition('a.field_artistid_value', $id);
      $query->condition('a.bundle', '_artists');
      $query->join('node_field_data', 'd', 'a.entity_id = d.nid');
      $query->fields('d', ['title']);
      $result = $query->execute()->fetchObject();
      global $base_url;
      $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'.$result->entity_id);
      $variables['output'] = Drupal\Core\Render\Markup::create("<a href='" . $base_url ."". $alias . "'>" . $result->title . "</a>");

      //dump($result); die;
    }

    // if ($field->field == 'nothing') {
    //   $id = $variables['output']->__toString();

    //   // Replace characters in the field output.
    //   $variables['output'] = Drupal\Core\Render\Markup::create("<p>5 times</p> <table class='times'><thead><tr><th>ASM Name</th><th>PRD Type</th><th>Set</th><th>Que Paper Code</th></tr></thead><tbody><tr><td>BP-AP-pcc-1-2</td><td>Unit Assessment</td><td>Base Set</td><td>MY23-LS-MAth-1</td></tr></tbody></table>");
    // }


  }
}

function collectorsystems_preprocess_views_view_fields(&$variables) {

  $view = $variables['view'];

  if ($view->id() == 'objects' && $view->current_display == 'page_1') {
    $nid = $variables['row']->nid;
    // Load the node using the node ID.
    $node = Node::load($nid);

    \Drupal::cache('config')->invalidate('customize_object_list_fields.settings');

    $config = \Drupal::config('customize_object_list_fields.settings');


    if($config->get('select_field2')){
      $options =  $config->get('select_field2');
    }

    $list_fields_values  = [];
    $object_url = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'.$nid);

    //object image
    $object_image_key = 'field_detaillargeurl';
    if ($node->hasField($object_image_key)) {
      $field_value = $node->get($object_image_key)->value;
      $object_image_url = $field_value;
      if(!$object_image_url){
        $object_image_url = \Drupal::theme()->getActiveTheme()->getPath().'/assets/img/noimage300.png';
      }
      $object_image = '<a href="'.$object_url.'"><img class="object-image mb-3" src='.$object_image_url.'></a>';

      $variables['object_image'] = $object_image;
    }

    foreach ($options as $key => $value) {
      if($key!='Title'){
        $key= 'field_'.$key;
      }
      $key = strtolower($key);
      if ($node->hasField($key)) {
        $field_value = $node->get($key)->value;
        if($key == 'title'){
          $url = Url::fromUri('entity:node/' . $nid);

          // Create a link using the URL and node title.
          $link = Link::fromTextAndUrl($node->getTitle(), $url);
          // Get the renderer service.
          $renderer = \Drupal::service('renderer');

          // Render the link.
          $link_output = $renderer->render($link->toRenderable());

          $field_value = $link_output;

        }
        if($field_value){
          $list_fields_values[] = $field_value;
        }
      }

    }


    $variables['list_fields_values'] = $list_fields_values;


  }

}

